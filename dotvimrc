" vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker foldenable:

"Notes {{{
    "Vim config for MacVim 7.3 (snapshot 63)
    "@author: Pablo Escalada <diesire@gmail.com>
    "@version: v0.1 - 05/01/2012
"}}}

set nocompatible "Must be first line

"Vundle plugin manager {{{
    filetype off
    if has("win16") || has("win32") || has("win64")|| has("win95")
        set rtp+=~/vimfiles/bundle/vundle/
    else
        set rtp+=~/.vim/bundle/vundle/
    endif
    call vundle#rc()

    "let Vundle manage Vundle
    Bundle 'gmarik/vundle'
"}}}

 "Vundle packages {{{
    "Fugitive {{{
        Bundle 'tpope/vim-fugitive'
    "}}}
    "Gitv {{{
        Bundle 'gregsexton/gitv'
    "}}}
    "Bundle 'mattn/gist-vim'
    "Wombat {{{
        Bundle 'vim-scripts/wombat256.vim'
    "}}}
    "Indent guides {{{
        Bundle 'nathanaelkane/vim-indent-guides'
        let g:indent_guides_start_level = 1
        let g:indent_guides_guide_size = 1
        let g:indent_guides_space_guides = 1
        let g:indent_guides_enable_on_vim_startup = 1
    "}}}
    "Vim preview {{{
        Bundle 'greyblake/vim-preview'
        "<Leader>P - will open current file converted to HTML in your browser.
    "}}}
    "NerdTree {{{
        Bundle 'scrooloose/nerdtree'

        "Open a NERDTree automatically when vim starts up if no files were specified
        autocmd vimenter * if !argc() | NERDTree | endif
        "Close vim if the only window left open is a NERDTree
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
        let NERDTreeIgnore=['\.bjk$', '\.b[xm]i$', '\.ms[ux]$' , '\.bd[bm]$' ,
             \ '\.bfi$' , '\.bpk$' , '\.bsk$' , '\.bwm$' , '\.exe$' , '\.tmp$' ,
             \ '\.exe$' , '\.ico$' , '\.lnk$' , '\.sfv$', '\~$' ]
        let NERDTreeWinSize=40
        noremap <C-S-e> :NERDTreeToggle<CR>
    "}}}
    "Supertab {{{
        Bundle 'ervandew/supertab'
    "}}}
    "Neocomplcache {{{
        Bundle 'Shougo/neocomplcache'
        let g:neocomplcache_enable_at_startup = 1
    "}}}
    "Syntastic {{{
        Bundle 'scrooloose/syntastic'
    "}}}
    "Enhanced statusBar {{{
    Bundle 'dickeytk/status.vim'
        "Load Fugitive
        "let g:statusline_fugitive = 1
        "No Load RVM
        let g:statusline_rvm = 0
        "Load Syntastic
        let g:statusline_syntastic = 1
        "Turn statusline on/off
        let g:statusline_enabled = 1
        "Turn on full paths
        let g:statusline_fullpath = 1
    "}}}
    "Tasklist {{{
    Bundle 'TaskList.vim'
    "TODO, XXX and FIXME like eclipse
    "}}}
"}}}

filetype plugin indent on "DO NOT DELETE - Plugins last line

"GUI {{{
if has ('gui_running')
    if has("unix")
        set guifont=Ubuntu\ Mono:h14
    endif

    set guioptions-=T "Remoce toolbar
    set background=dark
    colorscheme wombat256mod

    if has("gui_macvim")
        let macvim_hig_shift_movement = 1 "Shift+Arrows select text
    endif
else
    set background=dark
endif
"}}}

"General {{{
    " Modeline
    set modeline
    set modelines=5 "default numbers of lines to read for modeline instructions

    " Files
    set nofsync            "improves performance, let OS decide when to flush disk
    set autowrite "Writes on make/shell commands
    set autoread "watch for file changes by other programs
    set nowritebackup
    set nobackup "turn backup off
    set noswapfile
    " Store viminfo on exit
    set viminfo=%,'50,<100,n~/.viminfo
    set hidden             "allow open other file without saving current file

    set timeoutlen=250 "Time to wait after ESC (default causes an annoying delay)
    set history=1000
    set tabpagemax=150

    " Text
    set nowrap      "wrap long lines
    set encoding=utf-8
    syntax on "syntax highlighting
    set ffs=unix,dos,mac "Default file types
    try
        lang es_ES
    catch
    endtry


    " Tabs and indent
    "set tabstop=4 "hard tab
    set softtabstop=4      "vim sees 4 spaces as a tab
    set shiftwidth=4       "indentation
    set expandtab          "tabs mutate into spaces, if you wanna insert "real" tabs use Ctrl-v <tab> instance
    set autoindent

    " Keys
    set whichwrap=b,s,h,l,<,>,[,]   "backspace and cursor keys wrap to
    set backspace=indent,eol,start     "make backspace works like in other editors.

    " Console
    set t_Co=256 "set 256 colors. Make sure your console supports it.
    set lazyredraw "do not redraw the screen while macros are running. It improves performance
    set title

    "Visual {{{
    set mouse=a "automatically enable mouse usage
    set noerrorbells       "disable annoying beeps
    set novisualbell
    set linespace=0     "No extra spaces between rows

    set textwidth=80

    "Windows
    set winminheight=1     "never let a window to be less than 1px height
    set winminwidth=1
    set splitright         "split vertically to the right.
    set splitbelow         "split horizontally below.
    
    " Scroll
    set scrolloff=3        "show enough context
    set sidescrolloff=2
    set scrolljump=5    "lines to scroll when cursor leaves screen

    " Ruler
    set ruler "show the cursor position all the time
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) "a ruler on steroids

    " ColorColumn
    set colorcolumn=+1  "mark the ideal max text width
    "Use a less intrusive color for the color column (It's not linked in
    "the 'molokai' colorscheme as of this writing)
    hi clear ColorColumn
    hi link ColorColumn LineNr
    "Esta linea sompbrea el caracter 81 para marcar que se está excediendo
    "au BufEnter,BufNewFile,BufRead * exec 'match Todo /\%' . 81 . 'v/'

    " CursorLine
    set cursorline "highlight the screen line of the cursor
    hi cursorline guibg=#333333 "highlight bg color of current line
    hi CursorColumn guibg=#777777 "highlight cursor

    " Status line
    set statusline=%<%f%m%r\ %=\|\ Dec:\ %-3b\ Hex:\ 0x%2B\ \|\ %20(%4l,%4c%V\ \|\ %3P%)
    set laststatus=2
    "{ 
    "   "May collide against the StatusBar plugin
        "if has('statusline')
        "   set laststatus=2
        "
        "   " Broken down into easily includeable segments
        "   set statusline=%<%f\    " Filename
        "   set statusline+=%w%h%m%r " Options
        "   set statusline+=%{fugitive#statusline()} "  Git Hotness
        "   set statusline+=\ [%{&ff}/%Y]            " filetype
        "   set statusline+=\ [%{getcwd()}]          " current dir
        "   "set statusline+=\ [A=\%03.3b/H=\%02.2B] " ASCII / Hexadecimal value of char
        "   set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
        "endif
    "}

    " Tabs and trailing spaces
    set list
    "set listchars=tab:▷⋅,trail:⋅,nbsp:⋅ "uses utf8
    "set listchars=tab:»\ ,trail:·,precedes:…,extends:…,nbsp:⋅ 
    "set listchars=tab:\|\ 
    set listchars=tab:»\ ,trail:·,nbsp:⎵,precedes:←,extends:→ sbr=↪

    " Commands
    set autochdir          "change to the current directory
    set showmode "display the current mode
    set showcmd "show the command you're typing
    set wildmenu "enhance command completion
    set wildmode=list:longest,full " command <Tab> completion, list matches, then longest common part, then all
    set wildignore=*/.svn/*,CVS,*/.git,*/.hg/*,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp

    " Line numbers
    set number "show line numbers
    "}}}
    
    " Search
    set hlsearch           "highlight search
    set incsearch          "incremental search, search as you type
    set showfulltag        "show as much as possible
    set ignorecase         "ignore case when searching
    set smartcase       "case sensitive when uc present

    "folding settings
    set foldmethod=syntax "fold based on indent
    "set foldnestmax=3 "deepest fold is 3 levels
    set foldenable "fold by default
    set foldlevel=3
    set foldcolumn=3
"}}}

"Keybindings {{{
    " The default leader is '\', but many people prefer ',' as it's in a standard location
    let mapleader = ','
    
    " Permite seleccionar texto con SHIFT+flechas
    if has("gui_macvim")
        let macvim_hig_shift_movement = 1
    endif

    set pastetoggle=<F12>   "pastetoggle (sane indentation on pastes)

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Better folding toggle
    " If line has fold then toggle, else do default stuff
    nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
    " If line has fold then toggle recursively, else do default stuff
    nnoremap <silent> <S-Space> @=(foldlevel('.')?'zA':"\<S-Space>")<CR>

    "noremap <F4> :silent !/usr/bin/konsole --workdir :pwd<CR>
    nnoremap <silent> <F8> :TlistToggle<CR>

    " Press enter to clear the current search highlight.
    nnoremap <silent><CR> :nohlsearch<CR><CR>

    "show/Hide hidden Chars
    map <leader><F12> :set invlist<CR>

    " easy indentation in visual mode
    " This keeps the visual selection active after indenting.
    " Usually the visual selection is lost after you indent it.
    vmap > >gv
    vmap < <gv

    "noremap <leader><F5> :CheckSyntax<cr>
    "let g:checksyntax_auto = 1
"}}}

"Filetypes {{{
"Default section {{{
    function! JavaScriptFold()
"       setl foldmethod=syntax
"        setl foldlevelstart=1
        syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

        function! FoldText()
            return substitute(getline(v:foldstart), '{.*', '{...}', '')
        endfunction
        setl foldtext=FoldText()
    endfunction

    function! CustomFold()
        if has("folding")
            set foldtext=MyFoldText()
            function! MyFoldText()
                " for now, just don't try if version isn't 7 or higher
                if v:version < 701
                    return foldtext()
                endif
                " clear fold from fillchars to set it up the way we want later
                let &l:fillchars = substitute(&l:fillchars,',\?fold:.','','gi')
                let l:numwidth = (v:version < 701 ? 8 : &numberwidth)
                if &fdm=='diff'
                    let l:linetext=''
                    let l:foldtext='---------- '.(v:foldend-v:foldstart+1).' lines the same ----------'
                    let l:align = winwidth(0)-&foldcolumn-(&nu ? Max(strlen(line('$'))+1, l:numwidth) : 0)
                    let l:align = (l:align / 2) + (strlen(l:foldtext)/2)
                    " note trailing space on next line
                    setlocal fillchars+=fold:\ 
                elseif !exists('b:foldpat') || b:foldpat==0
                    let l:foldtext = ' '.(v:foldend-v:foldstart).' lines folded'.v:folddashes.'|'
                    let l:endofline = (&textwidth>0 ? &textwidth : 80)
                    let l:linetext = strpart(getline(v:foldstart),0,l:endofline-strlen(l:foldtext))
                    let l:align = l:endofline-strlen(l:linetext)
                    setlocal fillchars+=fold:-
                elseif b:foldpat==1
                  let l:align = winwidth(0)-&foldcolumn-(&nu ? Max(strlen(line('$'))+1, l:numwidth) : 0)
                    let l:foldtext = ' '.v:folddashes
                    let l:linetext = substitute(getline(v:foldstart),'\s\+$','','')
                    let l:linetext .= ' ---'.(v:foldend-v:foldstart-1).' lines--- '
                    let l:linetext .= substitute(getline(v:foldend),'^\s\+','','')
                    let l:linetext = strpart(l:linetext,0,l:align-strlen(l:foldtext))
                    let l:align -= strlen(l:linetext)
                    setlocal fillchars+=fold:-
                endif
                return printf('%s%*s', l:linetext, l:align, l:foldtext)
          endfunction
        endif
    endfunction

    "let b:foldpat=1
    call CustomFold()
    "au FileType javascript setl fen
    "au FileType javascript setl nocindent

    "au FileType javascript imap <c-t> AJS.log();<esc>hi
    "au FileType javascript imap <c-a> alert();<esc>hi

    "au FileType javascript inoremap <buffer> $r return
    "au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi
    "}}}
"JavaScript section {{{
    "au FileType javascript call JavaScriptFold()
    "au FileType javascript setl fen
    "au FileType javascript setl nocindent

    "au FileType javascript imap <c-t> AJS.log();<esc>hi
    "au FileType javascript imap <c-a> alert();<esc>hi

    "au FileType javascript inoremap <buffer> $r return
    "au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi

    "function! JavaScriptFold()
    "   setl foldmethod=syntax
    "    setl foldlevelstart=1
    "    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend
    "
    "    function! FoldText()
    "        return substitute(getline(v:foldstart), '{.*', '{...}', '')
    "    endfunction
    "    setl foldtext=FoldText()
    "endfunction
"}}}
" Markdown section {{{
    "Markdown to HTML  
    "au FileType Markdown nmap <leader>md :%!/usr/local/bin/markdown --html4tags <cr>
"}}}
"}}}
"Printer Options {{{
    set printoptions=header:3,number:y,left:10mm,right:10mm,top:10mm,bottom:10mm
    if has("win32")
        set printfont=Anonymous_Pro:h10
    elseif has("unix")
        set printfont=Anonymous\ Pro\ 10
    endif
"}}}
